   1               		.file	"test_i2cmaster.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.startup,"ax",@progbits
  11               	.global	main
  13               	main:
  14               	.LFB0:
  15               		.file 1 "test_i2cmaster.c"
   1:test_i2cmaster.c **** /****************************************************************************
   2:test_i2cmaster.c **** Title:    Access serial EEPROM 24C02 using I2C interace
   3:test_i2cmaster.c **** Author:   Peter Fleury <pfleury@gmx.ch> http://jump.to/fleury
   4:test_i2cmaster.c **** File:     $Id: test_i2cmaster.c,v 1.2 2003/12/06 17:07:18 peter Exp $
   5:test_i2cmaster.c **** Software: AVR-GCC 3.3
   6:test_i2cmaster.c **** Hardware: AT90S8515 at 4 Mhz, any AVR device can be used
   7:test_i2cmaster.c **** 
   8:test_i2cmaster.c **** Description:
   9:test_i2cmaster.c ****     This example shows how the I2C library i2cmaster.S can be used to 
  10:test_i2cmaster.c ****     access a serial eeprom.
  11:test_i2cmaster.c ****     Based on Atmel Application Note AVR300, adapted to AVR-GCC C interface
  12:test_i2cmaster.c **** 
  13:test_i2cmaster.c **** *****************************************************************************/
  14:test_i2cmaster.c **** #include <avr/io.h>
  15:test_i2cmaster.c **** #include "i2cmaster.h"
  16:test_i2cmaster.c **** 
  17:test_i2cmaster.c **** 
  18:test_i2cmaster.c **** #define Dev24C02  0xA2      // device address of EEPROM 24C02, see datasheet
  19:test_i2cmaster.c **** 
  20:test_i2cmaster.c **** 
  21:test_i2cmaster.c **** int main(void)
  22:test_i2cmaster.c **** {
  16               		.loc 1 22 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 1F92      		push __zero_reg__
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29 0006 CDB7      		in r28,__SP_L__
  30 0008 DEB7      		in r29,__SP_H__
  31               	.LCFI3:
  32               		.cfi_def_cfa_register 28
  33               	/* prologue: function */
  34               	/* frame size = 1 */
  35               	/* stack size = 3 */
  36               	.L__stack_usage = 3
  23:test_i2cmaster.c ****     unsigned char ret;
  24:test_i2cmaster.c ****     
  25:test_i2cmaster.c **** 
  26:test_i2cmaster.c ****     DDRB  = 0xff;                              // use all pins on port B for output 
  37               		.loc 1 26 0
  38 000a 8FEF      		ldi r24,lo8(-1)
  39 000c 87BB      		out 0x17,r24
  27:test_i2cmaster.c ****     PORTB = 0xff;                              // (active low LED's )
  40               		.loc 1 27 0
  41 000e 88BB      		out 0x18,r24
  28:test_i2cmaster.c **** 
  29:test_i2cmaster.c ****     i2c_init();                                // init I2C interface
  42               		.loc 1 29 0
  43 0010 00D0      		rcall i2c_init
  44               	.LVL0:
  30:test_i2cmaster.c **** 
  31:test_i2cmaster.c ****     /* write 0x75 to eeprom address 0x05 (Byte Write) */
  32:test_i2cmaster.c ****     ret = i2c_start(Dev24C02+I2C_WRITE);       // set device address and write mode
  45               		.loc 1 32 0
  46 0012 82EA      		ldi r24,lo8(-94)
  47 0014 00D0      		rcall i2c_start
  48               	.LVL1:
  33:test_i2cmaster.c ****     if ( ret ) {
  49               		.loc 1 33 0
  50 0016 8823      		tst r24
  51 0018 01F0      		breq .L2
  34:test_i2cmaster.c ****         /* failed to issue start condition, possibly no device found */
  35:test_i2cmaster.c ****         i2c_stop();
  52               		.loc 1 35 0
  53 001a 00D0      		rcall i2c_stop
  54               	.LVL2:
  36:test_i2cmaster.c ****         PORTB=0x00;                            // activate all 8 LED to show error */
  55               		.loc 1 36 0
  56 001c 18BA      		out 0x18,__zero_reg__
  57 001e 00C0      		rjmp .L3
  58               	.LVL3:
  59               	.L2:
  37:test_i2cmaster.c ****     }else {
  38:test_i2cmaster.c ****         /* issuing start condition ok, device accessible */
  39:test_i2cmaster.c ****         i2c_write(0x05);                       // write address = 5
  60               		.loc 1 39 0
  61 0020 85E0      		ldi r24,lo8(5)
  62               	.LVL4:
  63 0022 00D0      		rcall i2c_write
  64               	.LVL5:
  40:test_i2cmaster.c ****         i2c_write(0x75);                       // ret=0 -> Ok, ret=1 -> no ACK 
  65               		.loc 1 40 0
  66 0024 85E7      		ldi r24,lo8(117)
  67 0026 00D0      		rcall i2c_write
  68               	.LVL6:
  41:test_i2cmaster.c ****         i2c_stop();                            // set stop conditon = release bus
  69               		.loc 1 41 0
  70 0028 00D0      		rcall i2c_stop
  71               	.LVL7:
  42:test_i2cmaster.c **** 
  43:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0x05, wait until 
  44:test_i2cmaster.c ****            the device is no longer busy from the previous write operation */
  45:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
  72               		.loc 1 45 0
  73 002a 82EA      		ldi r24,lo8(-94)
  74 002c 00D0      		rcall i2c_start_wait
  75               	.LVL8:
  46:test_i2cmaster.c ****         i2c_write(0x05);                        // write address = 5
  76               		.loc 1 46 0
  77 002e 85E0      		ldi r24,lo8(5)
  78 0030 00D0      		rcall i2c_write
  79               	.LVL9:
  47:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);       // set device address and read mode
  80               		.loc 1 47 0
  81 0032 83EA      		ldi r24,lo8(-93)
  82 0034 00D0      		rcall i2c_rep_start
  83               	.LVL10:
  48:test_i2cmaster.c ****         ret = i2c_readNak();                    // read one byte
  84               		.loc 1 48 0
  85 0036 00D0      		rcall i2c_readNak
  86               	.LVL11:
  49:test_i2cmaster.c ****         i2c_stop();
  87               		.loc 1 49 0
  88 0038 8983      		std Y+1,r24
  89 003a 00D0      		rcall i2c_stop
  90               	.LVL12:
  50:test_i2cmaster.c ****         
  51:test_i2cmaster.c ****         PORTB = ~ret;                           // output byte on the LED's
  91               		.loc 1 51 0
  92 003c 8981      		ldd r24,Y+1
  93 003e 8095      		com r24
  94 0040 88BB      		out 0x18,r24
  52:test_i2cmaster.c **** 
  53:test_i2cmaster.c ****         /* write 0x70,0x71,072,073 to eeprom address 0x00..0x03 (Page Write),
  54:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  55:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
  95               		.loc 1 55 0
  96 0042 82EA      		ldi r24,lo8(-94)
  97 0044 00D0      		rcall i2c_start_wait
  98               	.LVL13:
  56:test_i2cmaster.c ****         i2c_write(0x00);                        // write start address = 0
  99               		.loc 1 56 0
 100 0046 80E0      		ldi r24,0
 101 0048 00D0      		rcall i2c_write
 102               	.LVL14:
  57:test_i2cmaster.c ****         i2c_write(0x70);                        // write data to address 0
 103               		.loc 1 57 0
 104 004a 80E7      		ldi r24,lo8(112)
 105 004c 00D0      		rcall i2c_write
 106               	.LVL15:
  58:test_i2cmaster.c ****         i2c_write(0x71);                        //    "    "   "    "    1
 107               		.loc 1 58 0
 108 004e 81E7      		ldi r24,lo8(113)
 109 0050 00D0      		rcall i2c_write
 110               	.LVL16:
  59:test_i2cmaster.c ****         i2c_write(0x72);                        //    "    "   "    "    2
 111               		.loc 1 59 0
 112 0052 82E7      		ldi r24,lo8(114)
 113 0054 00D0      		rcall i2c_write
 114               	.LVL17:
  60:test_i2cmaster.c ****         i2c_write(0x74);                        //    "    "   "    "    3
 115               		.loc 1 60 0
 116 0056 84E7      		ldi r24,lo8(116)
 117 0058 00D0      		rcall i2c_write
 118               	.LVL18:
  61:test_i2cmaster.c ****         i2c_stop();                             // set stop conditon = release bus
 119               		.loc 1 61 0
 120 005a 00D0      		rcall i2c_stop
 121               	.LVL19:
  62:test_i2cmaster.c ****     
  63:test_i2cmaster.c ****         /* write ok, read value back from eeprom address 0..3 (Sequencial Read),
  64:test_i2cmaster.c ****            wait until the device is no longer busy from the previous write operation */
  65:test_i2cmaster.c ****         i2c_start_wait(Dev24C02+I2C_WRITE);      // set device address and write mode
 122               		.loc 1 65 0
 123 005c 82EA      		ldi r24,lo8(-94)
 124 005e 00D0      		rcall i2c_start_wait
 125               	.LVL20:
  66:test_i2cmaster.c ****         i2c_write(0x00);                         // write address = 0
 126               		.loc 1 66 0
 127 0060 80E0      		ldi r24,0
 128 0062 00D0      		rcall i2c_write
 129               	.LVL21:
  67:test_i2cmaster.c ****         i2c_rep_start(Dev24C02+I2C_READ);        // set device address and read mode
 130               		.loc 1 67 0
 131 0064 83EA      		ldi r24,lo8(-93)
 132 0066 00D0      		rcall i2c_rep_start
 133               	.LVL22:
  68:test_i2cmaster.c ****         ret = i2c_readAck();                       // read one byte form address 0
 134               		.loc 1 68 0
 135 0068 00D0      		rcall i2c_readAck
 136               	.LVL23:
  69:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    1
 137               		.loc 1 69 0
 138 006a 00D0      		rcall i2c_readAck
 139               	.LVL24:
  70:test_i2cmaster.c ****         ret = i2c_readAck();                       //  "    "    "    "     "    2
 140               		.loc 1 70 0
 141 006c 00D0      		rcall i2c_readAck
 142               	.LVL25:
  71:test_i2cmaster.c ****         ret = i2c_readNak();                       //  "    "    "    "     "    3
 143               		.loc 1 71 0
 144 006e 00D0      		rcall i2c_readNak
 145               	.LVL26:
  72:test_i2cmaster.c ****         i2c_stop();                              // set stop condition = release bus
 146               		.loc 1 72 0
 147 0070 8983      		std Y+1,r24
 148 0072 00D0      		rcall i2c_stop
 149               	.LVL27:
  73:test_i2cmaster.c ****     
  74:test_i2cmaster.c ****         PORTB = ~ret;                            // output byte on the LED's        
 150               		.loc 1 74 0
 151 0074 8981      		ldd r24,Y+1
 152 0076 8095      		com r24
 153 0078 88BB      		out 0x18,r24
 154               	.L3:
 155               	.L4:
 156 007a 00C0      		rjmp .L4
 157               		.cfi_endproc
 158               	.LFE0:
 160               		.text
 161               	.Letext0:
 162               		.file 2 "i2cmaster.h"
 163               		.file 3 "/usr/local/Cellar/avr-gcc/4.7.2/lib/gcc/avr/4.7.2/../../../../avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 test_i2cmaster.c
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:2      *ABS*:000000000000003e __SP_H__
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:3      *ABS*:000000000000003d __SP_L__
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:4      *ABS*:000000000000003f __SREG__
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:5      *ABS*:0000000000000000 __tmp_reg__
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:6      *ABS*:0000000000000001 __zero_reg__
/var/folders/8k/cssvygj51_n_c11cn4qp5t_00000gn/T//ccNbbi1a.s:13     .text.startup:0000000000000000 main

UNDEFINED SYMBOLS
i2c_init
i2c_start
i2c_stop
i2c_write
i2c_start_wait
i2c_rep_start
i2c_readNak
i2c_readAck
