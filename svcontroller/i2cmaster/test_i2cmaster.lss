
test_i2cmaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000017e  000001f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c9c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000013b  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  00000fcb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000033f  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ef  00000000  00000000  0000135f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000120  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000038  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000f6  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000007c  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  0000171a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	69 d0       	rcall	.+210    	; 0xfe <main>
  2c:	a6 c0       	rjmp	.+332    	; 0x17a <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <i2c_delay_T2>:
;*************************************************************************
	.stabs	"",100,0,0,i2c_delay_T2
	.stabs	"i2cmaster.S",100,0,0,i2c_delay_T2
	.func i2c_delay_T2	; delay 5.0 microsec with 4 Mhz crystal	
i2c_delay_T2:        ; 4 cycles
	rjmp 1f      ; 2   "
  30:	00 c0       	rjmp	.+0      	; 0x32 <i2c_delay_T2+0x2>
1:	rjmp 2f      ; 2   "
  32:	00 c0       	rjmp	.+0      	; 0x34 <i2c_delay_T2+0x4>
2:	rjmp 3f      ; 2   "
  34:	00 c0       	rjmp	.+0      	; 0x36 <i2c_delay_T2+0x6>
3:	rjmp 4f      ; 2   "
  36:	00 c0       	rjmp	.+0      	; 0x38 <i2c_delay_T2+0x8>
4:	rjmp 5f      ; 2   "
  38:	00 c0       	rjmp	.+0      	; 0x3a <i2c_delay_T2+0xa>
5: 	rjmp 6f      ; 2   "
  3a:	00 c0       	rjmp	.+0      	; 0x3c <i2c_delay_T2+0xc>
6:	nop          ; 1   "
  3c:	00 00       	nop
	ret          ; 3   "
  3e:	08 95       	ret

00000040 <i2c_init>:
; extern void i2c_init(void)
;*************************************************************************
	.global i2c_init
	.func i2c_init
i2c_init:
	cbi SDA_DDR,SDA		;release SDA
  40:	b8 98       	cbi	0x17, 0	; 23
	cbi SCL_DDR,SCL		;release SCL
  42:	bb 98       	cbi	0x17, 3	; 23
	cbi SDA_OUT,SDA
  44:	c0 98       	cbi	0x18, 0	; 24
	cbi SCL_OUT,SCL
  46:	c3 98       	cbi	0x18, 3	; 24
	ret
  48:	08 95       	ret

0000004a <i2c_start>:
;*************************************************************************

	.global i2c_start
	.func   i2c_start
i2c_start:
	sbi 	SDA_DDR,SDA	;force SDA low
  4a:	b8 9a       	sbi	0x17, 0	; 23
	rcall 	i2c_delay_T2	;delay T/2
  4c:	f1 df       	rcall	.-30     	; 0x30 <i2c_delay_T2>
	
	rcall 	i2c_write	;write address
  4e:	1d d0       	rcall	.+58     	; 0x8a <i2c_write>
	ret
  50:	08 95       	ret

00000052 <i2c_rep_start>:
;*************************************************************************

	.global i2c_rep_start
	.func	i2c_rep_start
i2c_rep_start:
	sbi	SCL_DDR,SCL	;force SCL low
  52:	bb 9a       	sbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  54:	ed df       	rcall	.-38     	; 0x30 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  56:	b8 98       	cbi	0x17, 0	; 23
	rcall	i2c_delay_T2	;delay T/2
  58:	eb df       	rcall	.-42     	; 0x30 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  5a:	bb 98       	cbi	0x17, 3	; 23
	rcall 	i2c_delay_T2	;delay  T/2
  5c:	e9 df       	rcall	.-46     	; 0x30 <i2c_delay_T2>
	sbi 	SDA_DDR,SDA	;force SDA low
  5e:	b8 9a       	sbi	0x17, 0	; 23
	rcall 	i2c_delay_T2	;delay	T/2
  60:	e7 df       	rcall	.-50     	; 0x30 <i2c_delay_T2>
	
	rcall	i2c_write	;write address
  62:	13 d0       	rcall	.+38     	; 0x8a <i2c_write>
	ret
  64:	08 95       	ret

00000066 <i2c_start_wait>:
;*************************************************************************

	.global i2c_start_wait
	.func   i2c_start_wait
i2c_start_wait:
	mov	__tmp_reg__,r24
  66:	08 2e       	mov	r0, r24

00000068 <i2c_start_wait1>:
i2c_start_wait1:
	sbi 	SDA_DDR,SDA	;force SDA low
  68:	b8 9a       	sbi	0x17, 0	; 23
	rcall 	i2c_delay_T2	;delay T/2
  6a:	e2 df       	rcall	.-60     	; 0x30 <i2c_delay_T2>
	mov	r24,__tmp_reg__
  6c:	80 2d       	mov	r24, r0
	rcall 	i2c_write	;write address
  6e:	0d d0       	rcall	.+26     	; 0x8a <i2c_write>
	tst	r24		;if device not busy -> done
  70:	88 23       	and	r24, r24
	breq	i2c_start_wait_done
  72:	11 f0       	breq	.+4      	; 0x78 <i2c_start_wait_done>
	rcall	i2c_stop	;terminate write operation
  74:	02 d0       	rcall	.+4      	; 0x7a <i2c_stop>
	rjmp	i2c_start_wait1	;device busy, poll ack again
  76:	f8 cf       	rjmp	.-16     	; 0x68 <i2c_start_wait1>

00000078 <i2c_start_wait_done>:
i2c_start_wait_done:
	ret
  78:	08 95       	ret

0000007a <i2c_stop>:
;*************************************************************************

	.global	i2c_stop
	.func	i2c_stop
i2c_stop:
	sbi	SCL_DDR,SCL	;force SCL low
  7a:	bb 9a       	sbi	0x17, 3	; 23
	sbi	SDA_DDR,SDA	;force SDA low
  7c:	b8 9a       	sbi	0x17, 0	; 23
	rcall	i2c_delay_T2	;delay T/2
  7e:	d8 df       	rcall	.-80     	; 0x30 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  80:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  82:	d6 df       	rcall	.-84     	; 0x30 <i2c_delay_T2>
	cbi	SDA_DDR,SDA	;release SDA
  84:	b8 98       	cbi	0x17, 0	; 23
	rcall	i2c_delay_T2	;delay T/2
  86:	d4 df       	rcall	.-88     	; 0x30 <i2c_delay_T2>
	ret
  88:	08 95       	ret

0000008a <i2c_write>:
;	data = r24,  return = r25(=0):r24
;*************************************************************************
	.global i2c_write
	.func	i2c_write
i2c_write:
	sec			;set carry flag
  8a:	08 94       	sec
	rol 	r24		;shift in carry and out bit one
  8c:	88 1f       	adc	r24, r24
	rjmp	i2c_write_first
  8e:	01 c0       	rjmp	.+2      	; 0x92 <i2c_write_first>

00000090 <i2c_write_bit>:
i2c_write_bit:
	lsl	r24		;if transmit register empty
  90:	88 0f       	add	r24, r24

00000092 <i2c_write_first>:
i2c_write_first:
	breq	i2c_get_ack
  92:	59 f0       	breq	.+22     	; 0xaa <i2c_get_ack>
	sbi	SCL_DDR,SCL	;force SCL low
  94:	bb 9a       	sbi	0x17, 3	; 23
	brcc	i2c_write_low
  96:	18 f4       	brcc	.+6      	; 0x9e <i2c_write_low>
	nop
  98:	00 00       	nop
	cbi	SDA_DDR,SDA	;release SDA
  9a:	b8 98       	cbi	0x17, 0	; 23
	rjmp	i2c_write_high
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <i2c_write_high>

0000009e <i2c_write_low>:
i2c_write_low:
	sbi	SDA_DDR,SDA	;force SDA low
  9e:	b8 9a       	sbi	0x17, 0	; 23
	rjmp	i2c_write_high
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <i2c_write_high>

000000a2 <i2c_write_high>:
i2c_write_high:
	rcall 	i2c_delay_T2	;delay T/2
  a2:	c6 df       	rcall	.-116    	; 0x30 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  a4:	bb 98       	cbi	0x17, 3	; 23
	rcall	i2c_delay_T2	;delay T/2
  a6:	c4 df       	rcall	.-120    	; 0x30 <i2c_delay_T2>
	rjmp	i2c_write_bit
  a8:	f3 cf       	rjmp	.-26     	; 0x90 <i2c_write_bit>

000000aa <i2c_get_ack>:
	
i2c_get_ack:
	sbi	SCL_DDR,SCL	;force SCL low
  aa:	bb 9a       	sbi	0x17, 3	; 23
	cbi	SDA_DDR,SDA	;release SDA
  ac:	b8 98       	cbi	0x17, 0	; 23
	rcall	i2c_delay_T2	;delay T/2
  ae:	c0 df       	rcall	.-128    	; 0x30 <i2c_delay_T2>
	cbi	SCL_DDR,SCL	;release SCL
  b0:	bb 98       	cbi	0x17, 3	; 23

000000b2 <i2c_ack_wait>:
i2c_ack_wait:
	sbis	SCL_IN,SCL	;wait SCL high (in case wait states are inserted)
  b2:	b3 9b       	sbis	0x16, 3	; 22
	rjmp	i2c_ack_wait
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <i2c_ack_wait>
	
	clr	r24		;return 0
  b6:	88 27       	eor	r24, r24
	sbic	SDA_IN,SDA	;if SDA high -> return 1
  b8:	b0 99       	sbic	0x16, 0	; 22
	ldi	r24,1
  ba:	81 e0       	ldi	r24, 0x01	; 1
	rcall	i2c_delay_T2	;delay T/2
  bc:	b9 df       	rcall	.-142    	; 0x30 <i2c_delay_T2>
	clr	r25
  be:	99 27       	eor	r25, r25
	ret
  c0:	08 95       	ret

000000c2 <i2c_readNak>:
  c2:	88 27       	eor	r24, r24
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <i2c_read>

000000c6 <i2c_readAck>:
  c6:	81 e0       	ldi	r24, 0x01	; 1

000000c8 <i2c_read>:
	.global i2c_readAck
	.global i2c_readNak
	.global i2c_read		
	.func	i2c_read
i2c_readNak:
	clr	r24
  c8:	71 e0       	ldi	r23, 0x01	; 1

000000ca <i2c_read_bit>:
  ca:	bb 9a       	sbi	0x17, 3	; 23
  cc:	b8 98       	cbi	0x17, 0	; 23
  ce:	b0 df       	rcall	.-160    	; 0x30 <i2c_delay_T2>
  d0:	bb 98       	cbi	0x17, 3	; 23
  d2:	ae df       	rcall	.-164    	; 0x30 <i2c_delay_T2>

000000d4 <i2c_read_stretch>:
  d4:	b3 9b       	sbis	0x16, 3	; 22
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <i2c_read_stretch>
  d8:	88 94       	clc
  da:	b0 99       	sbic	0x16, 0	; 22
  dc:	08 94       	sec
  de:	77 1f       	adc	r23, r23
  e0:	a0 f7       	brcc	.-24     	; 0xca <i2c_read_bit>

000000e2 <i2c_put_ack>:
  e2:	bb 9a       	sbi	0x17, 3	; 23
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	11 f0       	breq	.+4      	; 0xec <i2c_put_ack_low>
  e8:	b8 98       	cbi	0x17, 0	; 23
  ea:	01 c0       	rjmp	.+2      	; 0xee <i2c_put_ack_high>

000000ec <i2c_put_ack_low>:
  ec:	b8 9a       	sbi	0x17, 0	; 23

000000ee <i2c_put_ack_high>:
  ee:	a0 df       	rcall	.-192    	; 0x30 <i2c_delay_T2>
  f0:	bb 98       	cbi	0x17, 3	; 23

000000f2 <i2c_put_ack_wait>:
  f2:	b3 9b       	sbis	0x16, 3	; 22
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <i2c_put_ack_wait>
  f6:	9c df       	rcall	.-200    	; 0x30 <i2c_delay_T2>
  f8:	87 2f       	mov	r24, r23
  fa:	99 27       	eor	r25, r25
  fc:	08 95       	ret

000000fe <main>:

#define Dev24C02  0xA2      // device address of EEPROM 24C02, see datasheet


int main(void)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
    unsigned char ret;
    

    DDRB  = 0xff;                              // use all pins on port B for output 
 108:	8f ef       	ldi	r24, 0xFF	; 255
 10a:	87 bb       	out	0x17, r24	; 23
    PORTB = 0xff;                              // (active low LED's )
 10c:	88 bb       	out	0x18, r24	; 24

    i2c_init();                                // init I2C interface
 10e:	98 df       	rcall	.-208    	; 0x40 <i2c_init>

    /* write 0x75 to eeprom address 0x05 (Byte Write) */
    ret = i2c_start(Dev24C02+I2C_WRITE);       // set device address and write mode
 110:	82 ea       	ldi	r24, 0xA2	; 162
 112:	9b df       	rcall	.-202    	; 0x4a <i2c_start>
    if ( ret ) {
 114:	88 23       	and	r24, r24
 116:	19 f0       	breq	.+6      	; 0x11e <main+0x20>
        /* failed to issue start condition, possibly no device found */
        i2c_stop();
 118:	b0 df       	rcall	.-160    	; 0x7a <i2c_stop>
        PORTB=0x00;                            // activate all 8 LED to show error */
 11a:	18 ba       	out	0x18, r1	; 24
 11c:	2d c0       	rjmp	.+90     	; 0x178 <main+0x7a>
    }else {
        /* issuing start condition ok, device accessible */
        i2c_write(0x05);                       // write address = 5
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	b4 df       	rcall	.-152    	; 0x8a <i2c_write>
        i2c_write(0x75);                       // ret=0 -> Ok, ret=1 -> no ACK 
 122:	85 e7       	ldi	r24, 0x75	; 117
 124:	b2 df       	rcall	.-156    	; 0x8a <i2c_write>
        i2c_stop();                            // set stop conditon = release bus
 126:	a9 df       	rcall	.-174    	; 0x7a <i2c_stop>

        /* write ok, read value back from eeprom address 0x05, wait until 
           the device is no longer busy from the previous write operation */
        i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
 128:	82 ea       	ldi	r24, 0xA2	; 162
 12a:	9d df       	rcall	.-198    	; 0x66 <i2c_start_wait>
        i2c_write(0x05);                        // write address = 5
 12c:	85 e0       	ldi	r24, 0x05	; 5
 12e:	ad df       	rcall	.-166    	; 0x8a <i2c_write>
        i2c_rep_start(Dev24C02+I2C_READ);       // set device address and read mode
 130:	83 ea       	ldi	r24, 0xA3	; 163
 132:	8f df       	rcall	.-226    	; 0x52 <i2c_rep_start>
        ret = i2c_readNak();                    // read one byte
 134:	c6 df       	rcall	.-116    	; 0xc2 <i2c_readNak>
        i2c_stop();
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	a0 df       	rcall	.-192    	; 0x7a <i2c_stop>
        
        PORTB = ~ret;                           // output byte on the LED's
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	80 95       	com	r24
 13e:	88 bb       	out	0x18, r24	; 24

        /* write 0x70,0x71,072,073 to eeprom address 0x00..0x03 (Page Write),
           wait until the device is no longer busy from the previous write operation */
        i2c_start_wait(Dev24C02+I2C_WRITE);     // set device address and write mode
 140:	82 ea       	ldi	r24, 0xA2	; 162
 142:	91 df       	rcall	.-222    	; 0x66 <i2c_start_wait>
        i2c_write(0x00);                        // write start address = 0
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	a1 df       	rcall	.-190    	; 0x8a <i2c_write>
        i2c_write(0x70);                        // write data to address 0
 148:	80 e7       	ldi	r24, 0x70	; 112
 14a:	9f df       	rcall	.-194    	; 0x8a <i2c_write>
        i2c_write(0x71);                        //    "    "   "    "    1
 14c:	81 e7       	ldi	r24, 0x71	; 113
 14e:	9d df       	rcall	.-198    	; 0x8a <i2c_write>
        i2c_write(0x72);                        //    "    "   "    "    2
 150:	82 e7       	ldi	r24, 0x72	; 114
 152:	9b df       	rcall	.-202    	; 0x8a <i2c_write>
        i2c_write(0x74);                        //    "    "   "    "    3
 154:	84 e7       	ldi	r24, 0x74	; 116
 156:	99 df       	rcall	.-206    	; 0x8a <i2c_write>
        i2c_stop();                             // set stop conditon = release bus
 158:	90 df       	rcall	.-224    	; 0x7a <i2c_stop>
    
        /* write ok, read value back from eeprom address 0..3 (Sequencial Read),
           wait until the device is no longer busy from the previous write operation */
        i2c_start_wait(Dev24C02+I2C_WRITE);      // set device address and write mode
 15a:	82 ea       	ldi	r24, 0xA2	; 162
 15c:	84 df       	rcall	.-248    	; 0x66 <i2c_start_wait>
        i2c_write(0x00);                         // write address = 0
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	94 df       	rcall	.-216    	; 0x8a <i2c_write>
        i2c_rep_start(Dev24C02+I2C_READ);        // set device address and read mode
 162:	83 ea       	ldi	r24, 0xA3	; 163
 164:	76 df       	rcall	.-276    	; 0x52 <i2c_rep_start>
        ret = i2c_readAck();                       // read one byte form address 0
 166:	af df       	rcall	.-162    	; 0xc6 <i2c_readAck>
        ret = i2c_readAck();                       //  "    "    "    "     "    1
 168:	ae df       	rcall	.-164    	; 0xc6 <i2c_readAck>
        ret = i2c_readAck();                       //  "    "    "    "     "    2
 16a:	ad df       	rcall	.-166    	; 0xc6 <i2c_readAck>
        ret = i2c_readNak();                       //  "    "    "    "     "    3
 16c:	aa df       	rcall	.-172    	; 0xc2 <i2c_readNak>
        i2c_stop();                              // set stop condition = release bus
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	84 df       	rcall	.-248    	; 0x7a <i2c_stop>
    
        PORTB = ~ret;                            // output byte on the LED's        
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 95       	com	r24
 176:	88 bb       	out	0x18, r24	; 24
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x7a>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
